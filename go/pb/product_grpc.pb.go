// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductServicesClient is the client API for ProductServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServicesClient interface {
	// untuk mendapatkan seluruh data product dari toko tersebut
	GetProducts(ctx context.Context, in *Shop, opts ...grpc.CallOption) (*ResponseProducts, error)
}

type productServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServicesClient(cc grpc.ClientConnInterface) ProductServicesClient {
	return &productServicesClient{cc}
}

func (c *productServicesClient) GetProducts(ctx context.Context, in *Shop, opts ...grpc.CallOption) (*ResponseProducts, error) {
	out := new(ResponseProducts)
	err := c.cc.Invoke(ctx, "/products.ProductServices/GetProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServicesServer is the server API for ProductServices service.
// All implementations must embed UnimplementedProductServicesServer
// for forward compatibility
type ProductServicesServer interface {
	// untuk mendapatkan seluruh data product dari toko tersebut
	GetProducts(context.Context, *Shop) (*ResponseProducts, error)
	mustEmbedUnimplementedProductServicesServer()
}

// UnimplementedProductServicesServer must be embedded to have forward compatible implementations.
type UnimplementedProductServicesServer struct {
}

func (UnimplementedProductServicesServer) GetProducts(context.Context, *Shop) (*ResponseProducts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedProductServicesServer) mustEmbedUnimplementedProductServicesServer() {}

// UnsafeProductServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServicesServer will
// result in compilation errors.
type UnsafeProductServicesServer interface {
	mustEmbedUnimplementedProductServicesServer()
}

func RegisterProductServicesServer(s grpc.ServiceRegistrar, srv ProductServicesServer) {
	s.RegisterService(&ProductServices_ServiceDesc, srv)
}

func _ProductServices_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Shop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServicesServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/products.ProductServices/GetProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServicesServer).GetProducts(ctx, req.(*Shop))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductServices_ServiceDesc is the grpc.ServiceDesc for ProductServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "products.ProductServices",
	HandlerType: (*ProductServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProducts",
			Handler:    _ProductServices_GetProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/product.proto",
}
